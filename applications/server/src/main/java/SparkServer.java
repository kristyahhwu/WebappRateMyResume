import static com.mongodb.client.model.Filters.*;
import static spark.Spark.*;
import static spark.Spark.before;


import com.google.gson.Gson;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

import com.mongodb.client.gridfs.GridFSBucket;
import com.mongodb.client.gridfs.GridFSBuckets;
import com.mongodb.client.gridfs.model.GridFSUploadOptions;
import org.bson.BsonBinarySubType;
import org.bson.Document;
import org.bson.types.Binary;
import org.bson.types.ObjectId;

//team member collection
class TeamMember{
    String name;
    String role;
    String fileName;
    String email;
    Binary image;

    public TeamMember(String name, String role, String fileName, String email) {
        this.name = name;
        this.role = role;
        this.fileName = fileName;
        this.email = email;
    }
}

class MemberSearchByRoleRequest{
    public String role;
}

class Initializer {
    ArrayList<TeamMember> teamMembers;

    public Initializer() {
        teamMembers = new ArrayList<>();
        TeamMember leiyi = new TeamMember("Leiyi Gao", "Team Leader", "leiyi.jpeg", "lgao4@mail.sfsu.edu");
        TeamMember michael = new TeamMember("Michael Han", "Git Master", "leiyi.jpeg", "mhan2@mail.sfsu.edu");
        TeamMember yinyin = new TeamMember("Yinyin Wu", "Scrum Master", "yinyin.png", "ywu21@mail.sfsu.edu");
        TeamMember justin = new TeamMember("Justin Mao", "Backend Leader", "justin.png", "jmao@mail.sfsu.edu");
        TeamMember nicholas = new TeamMember("Nicholas Hamada", "Frontend Leader", "nicholas.png", "nhamada@mail.sfsu.edu");
        teamMembers.add(leiyi);
        teamMembers.add(michael);
        teamMembers.add(yinyin);
        teamMembers.add(justin);
        teamMembers.add(nicholas);
    }

    public ArrayList<TeamMember> getTeamMembers() {
        return teamMembers;
    }

}

class Applicant{
    /*
    Entity 1: 	Applicant
    Items: 		Each user will have a unique account ID which will be linked to any resumes they
    post and linked to an email provided by the user which is stored in the mongo db database.
    Usage:		authentication, post and comments identification
    Privilege(s): 	basic user
    Attributes:	name, username, creation date, user id, email

     */
     String userId;
     String username;
     LocalDate creationDate;
     String email;

     public Applicant(){

     }

    public Applicant(String userId, String username, LocalDate creationDate, String email) {
        this.userId = userId;
        this.username = username;
        this.creationDate = creationDate;
        this.email = email;
    }
}

class ApplicantDTO{
    String userId;
    String username;
    String email;
}

class PostSearchByIdRequest{
    String id;
}

class PostDTO{
    String filePath;
    String fileName;
    String postId;// auto-generated by mongodb
    String postAuthor;// id of the user that posted connected with Applicant userId
}

class postConstructorParams {
    String postId;
    String title;
    String description;
    LocalDate postDate;
    String postAuthor;
    ObjectId resume;
    String comments;
    int rating;
}

class Post{
    /*
    Entity 2: 	Post
    Items:		Each user can post their resume, and the data is also stored in the MongoDB
Database. The resume is also linked with that user, as well as user’s authentication
such as user name, user email etc. Each user can comment on other users’ resume, it could be suggestions, error checking or give out any specific current market information associated with the resume. All this information is also stored in the MongoDb database.
Usage: 	Contains resume, get feedback from other users through comments, templates that
can be used by other users
    Attributes: 	Post id, post date, post author(foreign key to User table use userId), uploaded resume,
    comments, post rating
     */
    String postId;
    String title;
    String description;
    LocalDate postDate;
    String postAuthor;
    ObjectId resume;
    String comments;
    int rating;

    public Post(){

    }

    public Post(postConstructorParams param) {
        this.postId = param.postId;
        this.title = param.title;
        this.description = param.description;
        this.postDate = param.postDate;
        this.postAuthor = param.postAuthor;
        this.resume = param.resume;
        this.comments = param.comments;
        this.rating = param.rating;
    }
}

public class SparkServer {

    public static void main(String[] args) {
        port(4321);

        // open connection
        MongoClientURI uri = new MongoClientURI("mongodb://admin:password@localhost:27017/");
        MongoClient mongoClient = new MongoClient(uri);
        // get ref to database
        MongoDatabase db = mongoClient.getDatabase("UsersDatabase");
        // get ref to collection
        MongoCollection<Document> teamMemberCollection = db.getCollection("teamMemberCollection");
        // get ref to users collection
        //db.createCollection("applicantsCollection");
        MongoCollection<Document> applicantsCollection = db.getCollection("applicantsCollection");

        // get ref to post collections
        //db.createCollection("postsCollection");
        MongoCollection<Document> postsCollection = db.getCollection("postsCollection");
        // get ref to resume collection
        //db.createCollection("resumeCollection");
        MongoCollection<Document> resumeCollection = db.getCollection("resumeCollection");

        Gson gson = new Gson();

        // set CORS policy during preflight check
        options("/*", (request, response) -> {

            String accessControlRequestHeaders = request.headers("Access-Control-Request-Headers");
            if (accessControlRequestHeaders != null) {
                response.header("Access-Control-Allow-Headers", accessControlRequestHeaders);
            }

            String accessControlRequestMethod = request.headers("Access-Control-Request-Method");
            if (accessControlRequestMethod != null) {
                response.header("Access-Control-Allow-Methods", accessControlRequestMethod);
            }
            return "OK";
        });
        before((request, response) -> {
            response.header("Access-Control-Allow-Origin", "*");
        });

        get("/", (req, res) -> {
            return "OK";
        });

//        get("/post/search", (req, res) -> {
//            System.out.println("path: /post/search, keyword:" + req.queryParams("keyword"));
//            System.out.printf(gson.toJson("{Success!: success}"));
//            return gson.toJson("{'Success!': 'success'}");
//        });

        get("/post/getAll", (req, res) -> {// fetches all the posts from database
            System.out.println("path: /post/getAll");
            List<Document> posts = new ArrayList<>();
            List<Document> doc = postsCollection.find().into(new ArrayList<>());

            for (Document d : doc) {
                posts.add(Document.parse(d.toJson()));
            }
            return gson.toJson(posts);

        });

        get("/post/search", (req, res) -> {// /posts/search?id=7
            String searchKeyword = req.queryParams("keyword");
            System.out.println("path: /post/search, keyword:" + req.queryParams("keyword"));

            // Modify to get partial match: https://www.mongodb.com/docs/realm/sdk/java/examples/mongodb-remote-access/
            Document search = postsCollection.find(eq("title", searchKeyword)).first();
            System.out.println("search results: " + search.toString());
            if (search != null) {// find record where role is x
                System.out.println("post found");

                return gson.toJson(Document.parse(search.toJson()));

            } else {
                //can't find member
                return "Post not found";
            }
        });

        // add some posts to db. For demo purposes only
        get("/demo/init", (req, res) -> {
            System.out.println("path: /demo/init");

            List<List<String>> posts = new ArrayList<>();
            posts.add(List.of(LocalDateTime.now().toString(), "fresh grad looking for FTE roles", "sunt aut facere repellat provident occaecati excepturi optio reprehenderit"));
            posts.add(List.of(LocalDateTime.now().toString(), "sophomore resume for first internship", "ea molestias quasi exercitationem repellat qui ipsa sit aut"));
            posts.add(List.of(LocalDateTime.now().toString(), "some other title", "eum et est occaecati"));

            for (int i = 0; i < posts.size(); i++) {
                System.out.printf("Inserting " + posts.get(i).get(1) + "\n");
                try {
                    Document doc = new Document("postDate", posts.get(i).get(0))
                            .append("title", posts.get(i).get(1))
                            .append("description", posts.get(i).get(2));
                    // insert document into collection
                    postsCollection.insertOne(doc);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
            return "Initialized demo posts";
        });

        //--------------------------------------------------------------------------------------------------------------

        post("/post/create", (req, res) -> {// creating a new post pass in an object with many items in it
            String body = req.body();

            PostDTO newPost = gson.fromJson(body, PostDTO.class);
            System.out.println("body received"+ body);
            ObjectId resumeId = upload(newPost.filePath, newPost.fileName, db);
            System.out.println("Resume saved in DB with ID: "+ resumeId);
            // insert into transactions collection
            try {
                Document doc = new Document("postId", newPost.postId)
                        .append("postDate", LocalDateTime.now())
                        .append("postAuthor", newPost.postAuthor)
                        .append("resume", resumeId);
                // insert document into collection
                postsCollection.insertOne(doc);
            }
            catch (Exception ex){
                ex.printStackTrace();
            }
            return "Done";
        });

        post("/posts/user/", (req, res) -> {// creating a new user

            String body = req.body();
            //System.out.println("body received"+ body);
            ApplicantDTO newUser = new ApplicantDTO();
            try {
                newUser = gson.fromJson(body, ApplicantDTO.class);
            }catch(Exception e){
                e.printStackTrace();
            }
            //System.out.println("Applicant object created");
            // insert into transactions collection
            Document doc = new Document("userId", newUser.userId)// should be auto generated by mongo db
                    .append("username", newUser.username)
                    .append("creationDate", LocalDateTime.now())
                    .append("email", newUser.email);
            //System.out.println("About to insert into apllicants db");
            // insert document into collection
            applicantsCollection.insertOne(doc);


            return "User created";
        });

    }

    public static byte[] LoadImage(String filePath) throws Exception {
        File file = new File(filePath);
        int size = (int)file.length();
        byte[] buffer = new byte[size];
        FileInputStream in = new FileInputStream(file);
        in.read(buffer);
        in.close();
        return buffer;
    }

    public static ObjectId upload(String filePath,String fileName, MongoDatabase imgDb) {
        ObjectId fileId = null;
        try {
            //MongoDatabase imgDb = mongo.getDatabase("imageDatabase");

// Create a gridFSBucket
            GridFSBucket gridBucket = GridFSBuckets.create(imgDb);


            InputStream inStream = new FileInputStream(new File(filePath + "/" + fileName));

// Create some customize options for the details that describes
// the uploaded image
            GridFSUploadOptions uploadOptions = new GridFSUploadOptions().chunkSizeBytes(1024).metadata(new Document("type", "image").append("content_type", "image/png"));

            fileId = gridBucket.uploadFromStream(fileName, inStream, uploadOptions);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return fileId;
    }

}
//how to process request body
//example:
// get a team member by role
//

