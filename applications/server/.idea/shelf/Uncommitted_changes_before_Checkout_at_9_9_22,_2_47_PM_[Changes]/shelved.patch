Index: src/main/java/Spark.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import static com.mongodb.client.model.Filters.*;\nimport static spark.Spark.*;\n\nimport com.google.gson.Gson;\nimport com.mongodb.BasicDBObject;\nimport com.mongodb.DB;\nimport com.mongodb.Mongo;\nimport com.mongodb.MongoClient;\nimport com.mongodb.client.MongoCollection;\nimport com.mongodb.client.MongoDatabase;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.file.attribute.UserPrincipal;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.mongodb.gridfs.GridFS;\nimport com.mongodb.gridfs.GridFSDBFile;\nimport com.mongodb.gridfs.GridFSInputFile;\nimport org.bson.BsonBinarySubType;\nimport org.bson.Document;\nimport org.bson.types.Binary;\n\n//team member collection\nclass TeamMember{\n    String name;\n    String role;\n    String fileName;\n    String email;\n    Binary image;\n\n    public TeamMember(String name, String role, String fileName, String email) {\n        this.name = name;\n        this.role = role;\n        this.fileName = fileName;\n        this.email = email;\n    }\n}\n\nclass Initializer{\n    ArrayList<TeamMember> teamMembers;\n\n    public Initializer(){\n        teamMembers = new ArrayList<>();\n        TeamMember leiyi = new TeamMember(\"Leiyi Gao\", \"Team Leader\", \"leiyi.jpeg\", \"lgao4@mail.sfsu.edu\");\n        TeamMember michael = new TeamMember(\"Michael Han\", \"Git Master\", \"leiyi.jpeg\", \"mhan2@mail.sfsu.edu\");\n        TeamMember yinyin = new TeamMember(\"Yinyin Wu\", \"Scrum Master\", \"yinyin.png\", \"ywu21@mail.sfsu.edu\");\n        TeamMember justin = new TeamMember(\"Justin Mao\", \"Backend Leader\", \"justin.png\", \"jmao@mail.sfsu.edu\");\n        TeamMember nicholas = new TeamMember(\"Nicholas Hamada\", \"Frontend Leader\", \"nicholas.png\", \"nhamada@mail.sfsu.edu\");\n        teamMembers.add(leiyi);\n        teamMembers.add(michael);\n        teamMembers.add(yinyin);\n        teamMembers.add(justin);\n        teamMembers.add(nicholas);\n    }\n\n    public ArrayList<TeamMember> getTeamMembers() {\n        return teamMembers;\n    }\n}\n\npublic class Spark {\n\n    public static void main(String[] args) {\n        port(4321);\n\n        // open connection\n        MongoClient mongoClient = new MongoClient(\"localhost\", 27017);\n        // get ref to database\n        MongoDatabase db = mongoClient.getDatabase(\"UsersDatabase\");\n        // get ref to collection\n        MongoCollection<Document> teamMemberCollection = db.getCollection(\"teamMemberCollection\");\n\n        Gson gson = new Gson();\n\n        //get all the members and display them on the front end\n        get(\"/loadMembers\", (req, res) -> {\n            List<Document> members = new ArrayList<>();\n            List<Document> doc = teamMemberCollection.find().into(new ArrayList<>());\n\n            for (Document d : doc) {\n                members.add(Document.parse(d.toJson()));\n            }\n            return gson.toJson(members);\n        });\n\n        // insert group members for the first time\n        get(\"/initMembers\", (req, res) -> {\n            Initializer initializer = new Initializer();\n            ArrayList<TeamMember> members = initializer.getTeamMembers();\n            for (TeamMember member : members) {\n                // create the GSON image\n                member.image =\n                        new Binary(BsonBinarySubType.BINARY, LoadImage(member.fileName));\n                // insert into transactions collection\n                Document doc = new Document(\"name\", member.name)\n                        .append(\"role\", member.role)\n                        .append(\"image\", member.image)\n                        .append(\"email\", member.email);\n                // insert document into collection\n                teamMemberCollection.insertOne(doc);\n            }\n            return \"team members initialized\";\n        });\n    }\n    public static byte[] LoadImage(String filePath) throws Exception {\n        File file = new File(filePath);\n        int size = (int)file.length();\n        byte[] buffer = new byte[size];\n        FileInputStream in = new FileInputStream(file);\n        in.read(buffer);\n        in.close();\n        return buffer;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Spark.java b/src/main/java/Spark.java
--- a/src/main/java/Spark.java	(revision 853eb8a3858e72a01741eff39e24a6c7e13452a9)
+++ b/src/main/java/Spark.java	(date 1662756691129)
@@ -39,6 +39,12 @@
     }
 }
 
+class MemberSearchByRoleRequest{
+    public String role;
+
+
+}
+
 class Initializer{
     ArrayList<TeamMember> teamMembers;
 
@@ -104,7 +110,25 @@
             }
             return "team members initialized";
         });
+
+        //search each member endpoint
+        post("/eachMember", (req, res) -> {
+            String body = req.body();
+            MemberSearchByRoleRequest searchByRoleRequest = gson.fromJson(body, MemberSearchByRoleRequest.class);
+            System.out.println("body received"+ body);
+            Document search = teamMemberCollection.find(eq("role", searchByRoleRequest.role)).first();
+            if (search != null) {// find record where role is x
+                System.out.println("member found");
+
+                return gson.toJson(Document.parse(search.toJson()));
+
+            } else {
+                //can't find member
+                return "User not found";
+            }
+        });
     }
+
     public static byte[] LoadImage(String filePath) throws Exception {
         File file = new File(filePath);
         int size = (int)file.length();
@@ -116,3 +140,8 @@
     }
 
 }
+//how to process request body
+//example:
+// get a team member by role
+//
+
